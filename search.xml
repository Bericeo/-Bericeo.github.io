<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Scrapy爬虫框架</title>
      <link href="/2022/052611.html"/>
      <url>/2022/052611.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><p>前言</p><p>Scrapy是适用于Python的一个快速、高层次的屏幕抓取和web抓取框架，用于抓取web站点并从页面中提取结构化的数据。Scrapy用途广泛，可以用于数据挖掘、监测和<a href="https://baike.baidu.com/item/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/9815698?fromModule=lemma_inlink">自动化测试</a>。 </p><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h2 id="mac-or-linux"><a href="#mac-or-linux" class="headerlink" title="mac or linux"></a>mac or linux</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install scrapy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install wheel  #异步模块pip install pywin32pip install scrapy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="创建一个工程"><a href="#创建一个工程" class="headerlink" title="创建一个工程"></a>创建一个工程</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">scrapy startproject blood<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建一个爬虫文件"><a href="#创建一个爬虫文件" class="headerlink" title="创建一个爬虫文件"></a>创建一个爬虫文件</h2><p>在spiders子目录中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">scrapy genspider first www.xxxxx.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="执行工程"><a href="#执行工程" class="headerlink" title="执行工程"></a>执行工程</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">scrapy crawl qiubai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="robots-协议"><a href="#robots-协议" class="headerlink" title="robots 协议"></a><em>robots</em> 协议</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#Obey robots.txt rulesROBOTSTXT_OBEY = False #默认True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="显示定类型的日志信息"><a href="#显示定类型的日志信息" class="headerlink" title="显示定类型的日志信息"></a>显示定类型的日志信息</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">scrapy crawl first --nolog 或者#显示指定类型的日志信息LOG_LEVEL = 'ERROR'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="scrapy数据解析"><a href="#scrapy数据解析" class="headerlink" title="scrapy数据解析"></a>scrapy数据解析</h1><h2 id="1、通用配置"><a href="#1、通用配置" class="headerlink" title="1、通用配置"></a>1、通用配置</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#USER_AGENT = 'blood (+http://www.yourdomain.com)'  #默认注释USER_AGENT =Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36 Edg/101.0.1210.47'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">#解析import scrapyclass FirstSpider(scrapy.Spider):    # 爬虫文件的名称：就是爬虫源文件的一个唯一标识    name = 'first'    # 允许的域名：用来限定start urls列表中哪些url可以进行请求发送    allowed_domains = ['www.baidu.com']    # 起始的url列表：该列表中存放的url会被scrapy自动进行请求的发送    start_urls = ['http://www.baidu.com/', 'http://www.sougou.com/']    # 用作于数据解析：response参数表示的就是请求成功后对应的响应对象    def parse(self, response):        print(response)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、解析过程"><a href="#2、解析过程" class="headerlink" title="2、解析过程"></a>2、解析过程</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">import scrapyfrom blood.items import BloodItemclass QiubaiSpider(scrapy.Spider):    name = 'qiubai'    # allowed_domains = ['www.xxxxx.com']    start_urls = ['https://movie.douban.com/chart']    def parse(self, response):        # 解析片名+上映时间+演员+评分+链接        div_list = response.xpath('//*[@id="content"]/div/div[1]/div/div/table')        # print(div_list)        scr_list = div_list.xpath('//*[@class="pl2"]/a/@href').extract()  # 拿到所有的子页面链接        # print(scr_list)        for src in scr_list:  # 遍历请求            yield scrapy.Request(url=src, callback=self.parse_two)  # 挂载到下一级    def parse_two(self, response):        item = BloodItem()        item['name'] = response.xpath('//*[@id="content"]/h1/span[1]/text()').extract()        item['type'] = response.xpath('//*[@id="info"]/span[5]/text()').extract()        item['publish_time'] = response.xpath('//*[@id="info"]/span[11]/text()').extract()        # 主演        item['Starring'] = response.xpath('//*[@id="info"]/span[3]/span[2]/span[1]/a/text()').extract()        # 评分        item['Score'] = response.xpath('//*[@id="interest_sectl"]/div[1]/div[2]/strong/text()').extract()        yield item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、输出结果"><a href="#3、输出结果" class="headerlink" title="3、输出结果"></a>3、输出结果</h2><p><a href="https://movie.douban.com/subject/27199850/">https://movie.douban.com/subject/27199850/</a> 暗夜博士：莫比亚斯</p><h1 id="scrapy持久化储存"><a href="#scrapy持久化储存" class="headerlink" title="scrapy持久化储存"></a>scrapy持久化储存</h1><p>以上列举了爬取信息的方法，关于存储方面做以下概述</p><h3 id="1、基于终端指令"><a href="#1、基于终端指令" class="headerlink" title="1、基于终端指令"></a>1、基于终端指令</h3><ul><li><p>要求：只可以parse方法的返回值储存到本地的文件中</p></li><li><p>写入列表发返回储存</p></li><li><p>注意文本类型</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">scrapy crswl qiubai -o ./qiubai.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、基于管道"><a href="#2、基于管道" class="headerlink" title="2、基于管道"></a>2、基于管道</h3><p>开启管道：300优先级，优先级越小越优先</p><h4 id="settins-py配置："><a href="#settins-py配置：" class="headerlink" title="settins.py配置："></a>settins.py配置：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">ITEM_PIPELINES = {   'blood.pipelines.BloodPipeline': 300,}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="pipelines-py配置："><a href="#pipelines-py配置：" class="headerlink" title="pipelines.py配置："></a>pipelines.py配置：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># Define your item pipelines here## Don't forget to add your pipeline to the ITEM_PIPELINES setting# See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html# useful for handling different item types with a single interfacefrom itemadapter import ItemAdapterclass BloodPipeline:    f=None    def open_spider(self, spider):        print('爬虫开始')        self.f = open('./blood.csv', 'w', encoding='utf-8')  # 创建一个储存文件    def process_item(self, item, spider):        name = item['name']  # item实例化 name        type = item['type']        publish_time = item['publish_time']        # 主演        Starring = item['Starring']        # 评分        Score = item['Score']        self.f.write(str(name) + ':\n' + '类型'+str(type) + '上映时间：' + str(publish_time) + '主演：' + str(Starring) + '评分：' + str(Score)+'\n')        return item    def close_spider(self, spider):        print('爬虫结束')        self.f.close()  # 关闭文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="items-py配置："><a href="#items-py配置：" class="headerlink" title="items.py配置："></a>items.py配置：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># Define here the models for your scraped items## See documentation in:# https://docs.scrapy.org/en/latest/topics/items.htmlimport scrapyclass BloodItem(scrapy.Item):    # 名称    name = scrapy.Field()    type = scrapy.Field()    # 发布时间    publish_time = scrapy.Field()    # 主演    Starring = scrapy.Field()    # 评分    Score = scrapy.Field()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[完整代码已奉上，简单的记录一下：scrapy的用途主要还是使爬虫模块化，当需要处理的数据面广的时候，介于api便于监控和管理]</p><p><img src="https://img0.baidu.com/it/u=1589274033,3560941975&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=889&amp;h=500"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超级鹰OCR的使用方法（新用户领1000分，可用学习）</title>
      <link href="/2022/05047.html"/>
      <url>/2022/05047.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="注册超级鹰账号"><a href="#注册超级鹰账号" class="headerlink" title="注册超级鹰账号"></a><a href="http://www.chaojiying.com/user/reg/">注册超级鹰账号</a></h2><p>​    新建用户绑定获取1000分，可用于学习场景。</p><h2 id="获取软件ID号"><a href="#获取软件ID号" class="headerlink" title="获取软件ID号"></a>获取软件ID号</h2><p>用户中心 -&gt;软件ID -&gt;生成软件ID</p><p><img src="../medias/webimgs/1651653717715.png"></p><h2 id="安装Lshengpackage模块"><a href="#安装Lshengpackage模块" class="headerlink" title="安装Lshengpackage模块"></a>安装Lshengpackage模块</h2><p>​    cmd命令行运行，安装模块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip insta Lshengpackage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="调用方法："><a href="#调用方法：" class="headerlink" title="调用方法："></a>调用方法：</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">from Lshengpackage.chaojiying import Verification# 处理验证码verify = Verification() #调用超级鹰模块verify_code = verify.verification_code('超级鹰登录用户名', '超级鹰登录密码', '软件ID号',img)#外部请求超级鹰，img为验证码路劲图片文件print(verify_code['pic_str'])#打印验证码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../medias/webimgs/chaojiyingdengluyanzhnegma.png"><br><img src="../medias/webimgs/chaojiyingceshi.png"><br>方便调用，识别度还是蛮高的。仅供参考学习，1000分说多不多,关键是能薅^v^!<br><img src="https://c-ssl.duitang.com/uploads/item/201707/18/20170718102649_MkzmZ.thumb.1000_0.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 超级鹰 </tag>
            
            <tag> Python </tag>
            
            <tag> OCR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻松实现手机自动化操作</title>
      <link href="/2022/04266.html"/>
      <url>/2022/04266.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="模拟点击（仅支持安卓系统）"><a href="#模拟点击（仅支持安卓系统）" class="headerlink" title="模拟点击（仅支持安卓系统）"></a>模拟点击（仅支持安卓系统）</h1><blockquote><p><a href="https://blog.csdn.net/weixin_43927138/article/details/90477966">ADB下载及安装请自行参考：链接</a></p><p><a href="https://blog.csdn.net/qq_39969226/article/details/87897863">本文只列举个人常用命令，详细见文请参考</a></p></blockquote><h3 id="查看当前连接设备："><a href="#查看当前连接设备：" class="headerlink" title="查看当前连接设备："></a>查看当前连接设备：</h3><pre class="line-numbers language-adb" data-language="adb"><code class="language-adb">adb devices<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志:"></a>查看日志:</h3><pre class="line-numbers language-adb" data-language="adb"><code class="language-adb">adb logcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装apk文件"><a href="#安装apk文件" class="headerlink" title="安装apk文件:"></a>安装apk文件:</h3><pre class="line-numbers language-adb" data-language="adb"><code class="language-adb">adb install -r xxx.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="卸载App"><a href="#卸载App" class="headerlink" title="卸载App:"></a>卸载App:</h3><pre class="line-numbers language-adb" data-language="adb"><code class="language-adb">adb uninstall lsheng.app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="传递文件"><a href="#传递文件" class="headerlink" title="传递文件:"></a>传递文件:</h3><ul><li>上传到手机:</li></ul><pre class="line-numbers language-adb" data-language="adb"><code class="language-adb">adb push 文件名 SDCard/../手机端路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>下载:</li></ul><pre class="line-numbers language-adb" data-language="adb"><code class="language-adb">adb pull /sdcard/xxx.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="屏幕截图："><a href="#屏幕截图：" class="headerlink" title="屏幕截图："></a>屏幕截图：</h3><pre class="line-numbers language-adb" data-language="adb"><code class="language-adb">adb shell screencap /sdcard/screen.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="录制视频："><a href="#录制视频：" class="headerlink" title="录制视频："></a>录制视频：</h3><pre class="line-numbers language-adb" data-language="adb"><code class="language-adb">adb shell screenrecord /sdcard/lsheng.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="事件输入"><a href="#事件输入" class="headerlink" title="事件输入:"></a>事件输入:</h3><p>1.模拟屏幕点击：</p><pre class="line-numbers language-adb" data-language="adb"><code class="language-adb">adb shell input tap x y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.模拟手势滑动事件 ：</p><pre class="line-numbers language-adb" data-language="adb"><code class="language-adb">adb shell input swipe x， y， x2， y2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用自动化脚本的话，就是通过截屏找图，反馈坐标位置再进行模拟点击以及其他操作来达到自动化的目的。</p><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p>博主这里整理了下模块，可直接调用，方法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install Lshengpackage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现找图点击模块，功能调用方法见下方注释。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: UTF-8 -*-from Lshengpackage.Command_adb import command #调用模块com = command()#调用类com.star()      #开始adb进程com.kill()      #结束adb进程com.dev()       #查看当前链接设备com.log()       #查看日志com.up('file_name','path_phone')    #file_name:上传文件的名称，需要带文件后缀，path_phone：手机文件路径/sdcard/..com.down('file_name')   #下载：file_name;为文件名称，需要带文件后缀com.scr('pic_name')     #屏幕截图保存到手机根目录/sdcard/..，保存图片的名称.默认png格式com.install('apk_name')     #安装程序：无需后缀，默认apk文件安装com.uninstall('apk_name')   #卸载程序：无需后缀，默认apk文件卸载com.video_scr('video_name')     #屏幕录制：保存视频到手机根目录/sdcard/..,名称,默认mp4格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://c-ssl.duitang.com/uploads/blog/202012/15/20201215210531_d3c49.jpg"></p><p>其他功能请参考：<a href="https://github.com/Lsheng0-0/package/edit/main/README.md">https://github.com/Lsheng0-0/package/edit/main/README.md</a></p><p>最新版本请关注我的博客：<a href="https//Lsheng0-0.github.io">https//Lsheng0-0.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Adb </tag>
            
            <tag> Phone </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建博客过程分享(详细)</title>
      <link href="/2022/042510263.html"/>
      <url>/2022/042510263.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://www.bilibili.com/video/BV1je41147Ma?p=1">本文视频参考</a></p><blockquote><h2 id="1-Nodejs，Git环境的搭建："><a href="#1-Nodejs，Git环境的搭建：" class="headerlink" title="1.Nodejs，Git环境的搭建："></a>1.Nodejs，Git环境的搭建：</h2></blockquote><ul><li><a href="https://blog.csdn.net/qq_43285335/article/details/90696126">nodejs搭建教程</a>：内附下载地址。</li><li><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">git搭建教程</a>： <a href="https://github.com/Lsheng0-0/box">https://github.com/Lsheng0-0/box</a></li><li>官网下载比较慢，附送百度云下载地址，见我Github.</li><li><a href="https://www.cnblogs.com/luyuandatabase/p/12145707.html">配置淘宝云</a> ：关键点，不然后面安装插件的时候很痛苦，经常下载异常报错。</li></ul><blockquote><h2 id="2-注册GitHub账号并创建仓库"><a href="#2-注册GitHub账号并创建仓库" class="headerlink" title="2.注册GitHub账号并创建仓库 :"></a>2.注册GitHub账号并创建仓库 :</h2></blockquote><ul><li>这里需要注意仓库名需要与账号名称相同，例如Lsheng0-0/Lsheng0-0.github.io</li><li><a href="https://blog.csdn.net/qq_41782425/article/details/85179912">图文参考：</a><a href="https://blog.csdn.net/qq_41782425/article/details/85179912">https://blog.csdn.net/qq_41782425/article/details/85179912</a></li><li>个人建议极速浏览器有全文翻译插件，自动翻译成中文。小白友好。</li></ul><blockquote><h2 id="3-GitHub的ssh密匙添加："><a href="#3-GitHub的ssh密匙添加：" class="headerlink" title="3.GitHub的ssh密匙添加："></a>3.GitHub的ssh密匙添加：</h2></blockquote><ul><li><a href="https://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html">参考教程：</a><a href="https://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html">https://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html</a></li><li>这个也很好理解，主要目的就是通过前面安装的Git环境，将本地的网站文件能够本地上传到你的github对应的仓库里。</li><li>避免了手动传输的麻烦。</li><li>邮箱可填你注册github的邮箱，密码简单易记点的好，毕竟后期调试，上传文章的时候会经常用到。</li></ul><blockquote><h2 id="4-hexo的搭建和使用："><a href="#4-hexo的搭建和使用：" class="headerlink" title="4.hexo的搭建和使用："></a>4.hexo的搭建和使用：</h2></blockquote><ul><li>Hexo很好理解，就是一个用 Node.js构建的快速、简洁且强大的博客框架。 </li><li><a href="https://hexoscript.gitbook.io/hexo-script/">详细教程</a> ：<a href="https://hexoscript.gitbook.io/hexo-script/">https://hexoscript.gitbook.io/hexo-script/</a></li><li>因为文档中的中文加载不出来，建议浏览器全文翻译中文再食用。</li><li>若以上都操作完成，可直接参考第4,7项。</li><li>本地创建存放博客的文件夹</li></ul><p>下载install.sh文件到文件夹内，同时右键调出Git Bush Here，右键粘贴</p><pre class="line-numbers language-none"><code class="language-none">source install.sh hexo_win<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[^博客自行创建，耐心等待]: </p><p><img src="../medias/webimgs/4534.png"></p><p>看到这一行意味着创建成功了，生成hexoblog文件夹就是你博客的本地文件了。</p><p>这时候你的本地博客基本已经创建完成，博客文件夹内执行hexo  s命令能够本地生成静态网站，网站内容在public文件夹内自行浏览</p><p>或者默认浏览器打开默认地址<a href="http://localhost:4000/%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E6%B5%8F%E8%A7%88">http://localhost:4000/进行本地浏览</a></p><p>先不急。</p><blockquote><h2 id="5-Hexo部署到github上，并域名浏览："><a href="#5-Hexo部署到github上，并域名浏览：" class="headerlink" title="5.Hexo部署到github上，并域名浏览："></a>5.Hexo部署到github上，并域名浏览：</h2></blockquote><p>需要在install.sh脚本所在目录下右键git bash，运行如下命令： </p><pre class="line-numbers language-none"><code class="language-none">source install.sh deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://3344701850-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-LlpfTEtpw-XHjloYx-t%2F-LlurwQcZHGhMvMGz358%2F-LlutGTSONJsGgLT-HB3%2F8.png?alt=media&amp;token=6b16f0f3-aaa4-4083-960c-e41031408d1a"> </p><p>把下载到的up.sh复制到hexoblog文件夹下，执行命令：</p><pre class="line-numbers language-none"><code class="language-none">source up.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>打开根配置文件_config.yml ，可文本打开</li><li>找到deploy，一般在最后一行，改成如下格式 </li></ul><p><img src="https://3344701850-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-LlpfTEtpw-XHjloYx-t%2F-LluvTLNmEKB-I1ZDiSA%2F-LluyCdpQ92nd8tuqn9Z%2F22.png?alt=media&amp;token=05f14980-032b-4997-b2b2-9bb31c28332d"> </p><p>然后运行命令：上传你的博客</p><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若你的github没有上传成功，安装插件再试下</p><pre class="line-numbers language-none"><code class="language-none">cnpm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意:基于你淘宝镜像安装成功。</li></ul><p><a href="https://jingyan.baidu.com/article/acf728fd64b5a2f8e510a31d.html">创建github页面参考：</a></p><ul><li>正常创建成功后，浏览器地址栏搜索https//仓库名.github.io,就能访问你的网站了。</li></ul><p>示例：<a href="https://lsheng0-0.github.io/">https://lsheng0-0.github.io</a></p><ul><li>当然网站搭建好了，给自己的网站进行装饰。hexo有各种主题供你挑选。</li><li>博主用的matery主题，以下是详细配置方法，自行享用。</li><li>你也可以搜索其他美观的主题供自己使用</li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">matery主题官网：</a> 参考幽灵之狐 <a href="https://github.com/blinkfox">https://github.com/blinkfox</a></li></ul><p><img src="https://p0.ssl.img.360kuai.com/t013f5eb23cad29bfce.webp"></p><p>不是很难，一个既美观又实用专属于自己的网站就可以搭建好。不需要太多的编程基础，小白易操。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录CDN加速遇到的问题</title>
      <link href="/2022/042346084.html"/>
      <url>/2022/042346084.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://www.jsdelivr.com/">jsDelivr</a>&nbsp;+ Github 全站CDN加速</p><p>内容来源：<a href="https://blog.sky03.cn/posts/42790.html">Hexo进阶之各种优化</a> </p><p>[<a href="https://blog.sky03.cn/posts/42790.html]">https://blog.sky03.cn/posts/42790.html]</a>: </p><h2 id="CDN简介："><a href="#CDN简介：" class="headerlink" title="CDN简介："></a>CDN简介：</h2><ul><li><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——<a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/4034265?fr=aladdin">百度百科</a></p></li><li><p>因为Github的资源在国内加载速度比较慢，所以可以CDN加速来优化网站的打开速度，<a href="https://www.jsdelivr.com/">jsDelivr</a> + Github便是免费且好用的CDN，非常适合博客网站使用。</p></li></ul><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><pre class="line-numbers language-none"><code class="language-none">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>例如：</strong></p><pre class="line-numbers language-none"><code class="language-none">https://cdn.jsdelivr.net/gh/Lsheng0-0/Lsheng0-0.github.io/medias/loading.gif<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源</li></ul><ul><li><p>但也就是这加速困扰了我一天，因为地址未知问题，hexo 部署之后的映射地址<a href="https://cdn.jsdelivr.net/gh/Lsheng0-0/Lsheng0-0.github.io">https://cdn.jsdelivr.net/gh/Lsheng0-0/Lsheng0-0.github.io</a> 之后都会多两个../,想来应该是我文件里的目录都是用../medias,这样的格式调用的，暂时还不知道怎么全局修改T.T…</p></li><li><p>反正就是用了之后除主页面其他页面都只剩文字了。</p></li><li><p>摸索了一天，但还好找到了问题根节，处理起来想来也不是什么问题了。</p></li><li><p>关于其他的hexo部署后只显示文字等问题可以参考</p><ul><li><a href="https://blog.csdn.net/GQ_Sonofgod/article/details/119349705">hexo搭建的博客只显示文字，不显示主题</a></li></ul><p>但无非都是地址映射的问题，仅供参考。</p></li></ul><p><img src="https://n.sinaimg.cn/sinakd20116/600/w1920h1080/20201013/99db-kakmcxe5072956.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsDelivr </tag>
            
            <tag> Github </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo服务异常之端口占用</title>
      <link href="/2022/042248128.html"/>
      <url>/2022/042248128.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="基于Node环境下的异常"><a href="#基于Node环境下的异常" class="headerlink" title="基于Node环境下的异常"></a>基于Node环境下的异常</h3><p>（自己搭建博客的时候，出现的问题还是挺多的，随笔记录了一下）</p><p>hexo s 运行报错，如下图</p><p><img src="../medias/webimgs/af51671e5f30e366c24766569933e9b.png"></p><ul><li><p>异常，因为每次hexo s后都ctrl+c不出来，卡在那里，强制退出不行。</p></li><li><p>提示显示是默认端口号被占用。</p></li><li><p>换一个启动，启动了。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">hexo s -p 80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>心里不舒服，查答案(恍然大悟)</p></li><li><p>打开管理员权限CMD</p></li><li><p>我查到了主机在用端口</p><pre class="line-numbers language-none"><code class="language-none">netstat -o -n -a | findstr :4001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询本地端口号是4001</p></li></ul><p><img src="../medias/webimgs/a24259ebcc802e36daf2aeb420d32ae.png"></p><ul><li>本地接口是16380</li><li>那么就Kill掉</li></ul><pre class="line-numbers language-none"><code class="language-none">taskkill /F /PID 16380<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="../medias/webimgs/4df1853f33bed1bd683ff42c3d39748.png"></p><ul><li>再启动就不报错了</li></ul><p><img src="../medias/webimgs/65e586308f8eb1a57c36b967f9e4a1e.png"></p><ul><li>看不到红字，舒服了</li><li>无用的知识点 ^v^+1</li></ul><p><img src="https://c-ssl.duitang.com/uploads/blog/202104/04/20210404130905_6b82c.thumb.1000_0.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 异常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown编辑器(博主自用)</title>
      <link href="/2022/042110263.html"/>
      <url>/2022/042110263.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Typora介绍："><a href="#Typora介绍：" class="headerlink" title="Typora介绍："></a>Typora介绍：</h2><h4 id="Typora-是一款markdown编辑器，自动转译-md格式，方便快捷。"><a href="#Typora-是一款markdown编辑器，自动转译-md格式，方便快捷。" class="headerlink" title="Typora 是一款markdown编辑器，自动转译.md格式，方便快捷。"></a><strong>Typora</strong> 是一款markdown编辑器，自动转译.md格式，方便快捷。</h4><h4 id="Typora文本编辑器官网下载慢，中文站也试了加载失败。在网上找了gitee镜像资源发现也无效了，记录一下。"><a href="#Typora文本编辑器官网下载慢，中文站也试了加载失败。在网上找了gitee镜像资源发现也无效了，记录一下。" class="headerlink" title="Typora文本编辑器官网下载慢，中文站也试了加载失败。在网上找了gitee镜像资源发现也无效了，记录一下。"></a><strong>Typora</strong>文本编辑器官网下载慢，中文站也试了加载失败。在网上找了gitee镜像资源发现也无效了，记录一下。</h4><ul><li><p><a href="https://www.typora.net/">官网地址</a>：<a href="https://www.typora.net/">https://www.typora.net/</a></p></li><li><p><a href="https://pan.baidu.com/s/11AiK6hSD4hb1uGds2K7QzQ">直接附上链接</a></p></li><li><p>链接提取码:   ecsy </p></li><li><p>针对其他个人学习资源我也放到了本人的<a href="https://github.com/Lsheng0-0/box">Github</a>上，仅供个人学习参考</p></li></ul><p><img src="webimgs/12-1FQQ45016.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客初创</title>
      <link href="/2022/041924600.html"/>
      <url>/2022/041924600.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、Hexo框架介绍"><a href="#一、Hexo框架介绍" class="headerlink" title="一、Hexo框架介绍"></a>一、Hexo框架介绍</h2><p>Hexo 框架通过预设便捷生成静态页面，从而可以快捷的搭建和设计自己的网站内容，其中通过Markdown解析，为文字排版省去了很多的过程。本博客就是搭建于Hexo框架之上，简单易学。</p><h2 id="二、Hexo-基础命令"><a href="#二、Hexo-基础命令" class="headerlink" title="二、Hexo 基础命令"></a>二、Hexo 基础命令</h2><h3 id="创建新帖子"><a href="#创建新帖子" class="headerlink" title="创建新帖子"></a>创建新帖子</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建静态文件"><a href="#创建静态文件" class="headerlink" title="创建静态文件"></a>创建静态文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="发布草稿"><a href="#发布草稿" class="headerlink" title="发布草稿"></a>发布草稿</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo publish<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo depl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="清除缓存文件"><a href="#清除缓存文件" class="headerlink" title="清除缓存文件"></a>清除缓存文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、Hexo文件简单说明"><a href="#三、Hexo文件简单说明" class="headerlink" title="三、Hexo文件简单说明"></a>三、Hexo文件简单说明</h2><h4 id="（1）-config-yml-网站的配置信息"><a href="#（1）-config-yml-网站的配置信息" class="headerlink" title="（1）_config.yml 网站的配置信息"></a>（1）_config.yml 网站的配置信息</h4><h4 id="（2）package-json-应用程序的信息，可删除"><a href="#（2）package-json-应用程序的信息，可删除" class="headerlink" title="（2）package.json 应用程序的信息，可删除"></a>（2）package.json 应用程序的信息，可删除</h4><h4 id="（3）sacffolds-模板文件夹。新建的文章会根据其建立文件。（可以先建好格式，之后统一以其为模板）"><a href="#（3）sacffolds-模板文件夹。新建的文章会根据其建立文件。（可以先建好格式，之后统一以其为模板）" class="headerlink" title="（3）sacffolds 模板文件夹。新建的文章会根据其建立文件。（可以先建好格式，之后统一以其为模板）"></a>（3）sacffolds 模板文件夹。新建的文章会根据其建立文件。（可以先建好格式，之后统一以其为模板）</h4><h4 id="（4）source-资源文件夹存放用户资源的地方"><a href="#（4）source-资源文件夹存放用户资源的地方" class="headerlink" title="（4）source 资源文件夹存放用户资源的地方"></a>（4）source 资源文件夹存放用户资源的地方</h4><h4 id="（5）themes-主题文件夹hexo的常用命令"><a href="#（5）themes-主题文件夹hexo的常用命令" class="headerlink" title="（5）themes 主题文件夹hexo的常用命令"></a>（5）themes 主题文件夹hexo的常用命令</h4><h2 id="四-主题修改"><a href="#四-主题修改" class="headerlink" title="四.主题修改"></a>四.主题修改</h2><h3 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h3><p>因为Hexo框架趋近于模块化，通过修改编辑主题包，可以很好的设计成自己想要的类型。并且有很多优秀的作品[可供下载]:<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><h3 id="2-下载方式"><a href="#2-下载方式" class="headerlink" title="2.下载方式"></a>2.下载方式</h3><p>下载的方式也比较便捷，通过git轻松拿到github库中的资源到本地目录中，供开源使用使用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ git clone https://github.com/blog/hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h3><p>更改默认主题的情况我们至于要按照Hexo的要求去重定义自己样式，并且在“_config.yml”配置文件中重定向主题目录即可，例如hexo-theme-matery。</p><pre class="line-numbers language-none"><code class="language-none"># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-mater<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-自定义内容"><a href="#4-自定义内容" class="headerlink" title="4.自定义内容"></a>4.自定义内容</h3><p>当然模版都有很大的局限性，当不明白其中含义的时候，无法直接判断具体的作用，没办法按照自己的意愿去DIY。各位看官如果真正感兴趣的话，还是认真的去同步学习下[参考文件]:<a href="https://github.com/blinkfox/hexo-theme-matery%E3%80%82">https://github.com/blinkfox/hexo-theme-matery。</a> （过程很枯燥但结果真的很好）。</p><p><img src="https://img.zcool.cn/community/0108f15f423205a80120a8214d6de2.jpg?x-oss-process=image/auto-orient,1/resize,m_lfit,w_1280,limit_1/sharpen,200"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
